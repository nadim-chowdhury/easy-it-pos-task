generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client"
    binaryTargets = ["native", "windows", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    username  String   @unique
    password  String
    name      String
    role      String   @default("CASHIER") // ADMIN, MANAGER, CASHIER
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sales Sale[]

    // Performance indexes
    @@index([email])
    @@index([username])
    @@index([role])
    @@index([isActive])
    @@map("users")
}

model Product {
    id          String   @id @default(cuid())
    name        String
    code        String   @unique
    price       Float
    stockQty    Int
    category    String?
    description String?
    imageUrl    String?
    createdBy   String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    saleItems     SaleItem[]
    StockMovement StockMovement[]

    // Performance indexes
    @@index([name])
    @@index([code])
    @@index([isActive])
    @@index([createdAt])
    @@index([name, isActive])
    @@index([category])
    @@map("products")
}

model Sale {
    id             String   @id @default(cuid())
    saleNumber     String   @unique
    total          Float // Subtotal before tax and discount
    finalAmount    Float // Final amount after tax and discount
    tax            Float    @default(0)
    discount       Float    @default(0)
    paymentMethod  String   @default("CASH") // CASH, CARD, DIGITAL_WALLET
    userId         String // Make required - every sale must have a user
    notes          String?
    customerName   String? // Store customer info directly in sale
    customerPhone  String? // Store customer info directly in sale
    amountReceived Float? // For cash transactions
    changeAmount   Float? // For cash transactions
    status         String   @default("COMPLETED") // COMPLETED, CANCELLED, REFUNDED
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    user  User       @relation(fields: [userId], references: [id])
    items SaleItem[]

    // Performance indexes
    @@index([userId])
    @@index([createdAt])
    @@index([userId, createdAt])
    @@index([saleNumber])
    @@index([status])
    @@index([paymentMethod])
    @@index([customerName]) // For customer lookup
    @@index([customerPhone]) // For customer lookup
    @@map("sales")
}

model SaleItem {
    id        String @id @default(cuid())
    saleId    String
    productId String
    quantity  Int
    price     Float // Price at time of sale (for historical accuracy)

    sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    // Performance indexes
    @@index([saleId])
    @@index([productId])
    @@index([saleId, productId]) // Composite for common queries
    @@map("sale_items")
}

model StockMovement {
    id           String   @id @default(cuid())
    productId    String
    movementType String // 'SALE', 'PURCHASE', 'ADJUSTMENT', 'RETURN'
    quantity     Int // Positive for additions, negative for reductions
    previousQty  Int
    newQty       Int
    reason       String
    reference    String? // Sale ID, Purchase Order, etc.
    userId       String? // Who made the movement
    createdAt    DateTime @default(now())

    product Product @relation(fields: [productId], references: [id])

    // Performance indexes
    @@index([productId])
    @@index([createdAt])
    @@index([movementType])
    @@index([productId, createdAt])
    @@map("stock_movements")
}
